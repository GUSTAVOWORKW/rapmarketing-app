// supabase/functions/refresh-spotify-token/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

serve(async (req) => {
  // Trata as requisições CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // 1. Valida o JWT e obtém o usuário
    // As variáveis de ambiente do Supabase são necessárias para isso.
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL')!,
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    );

    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
        throw new Error('Cabeçalho de autorização ausente');
    }

    const { data: { user }, error: userError } = await supabaseAdmin.auth.getUser(authHeader.replace('Bearer ', ''));

    if (userError) {
        console.error('Erro de verificação do JWT:', userError.message);
        return new Response(JSON.stringify({ error: 'Falha na autenticação' }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 401
        });
    }
    if (!user) {
        return new Response(JSON.stringify({ error: 'Usuário não encontrado' }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 401
        });
    }
    const userId = user.id; // ID do usuário obtido de forma segura do token

    // 2. Obtém o refreshToken do corpo da requisição
    const { refreshToken } = await req.json();
    if (!refreshToken) {
      return new Response(JSON.stringify({ error: 'O refreshToken é obrigatório' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400
      });
    }

    // 3. Obtém as credenciais do Spotify das variáveis de ambiente
    const SPOTIFY_CLIENT_ID = Deno.env.get('SPOTIFY_CLIENT_ID');
    const SPOTIFY_CLIENT_SECRET = Deno.env.get('SPOTIFY_CLIENT_SECRET');

    if (!SPOTIFY_CLIENT_ID || !SPOTIFY_CLIENT_SECRET) {
      throw new Error('As credenciais do Spotify não foram configuradas nas variáveis de ambiente');
    }

    // 4. Solicita um novo token ao Spotify
    const tokenResponse = await fetch('https://accounts.spotify.com/api/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + btoa(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`)
      },
      body: new URLSearchParams({
        grant_type: 'refresh_token',
        refresh_token: refreshToken
      })
    });

    if (!tokenResponse.ok) {
      const errorText = await tokenResponse.text();
      console.error('Erro ao renovar token do Spotify:', errorText);
      throw new Error(`Erro ao renovar token do Spotify: ${errorText}`);
    }

    const tokenData = await tokenResponse.json();

    // 5. Atualiza o token no banco de dados
    const expiresAt = Date.now() + tokenData.expires_in * 1000;
    const { error: updateError } = await supabaseAdmin
      .from('spotify_tokens')
      .update({
        access_token: tokenData.access_token,
        // O Spotify pode enviar um novo refresh_token, use-o se estiver disponível
        refresh_token: tokenData.refresh_token || refreshToken,
        expires_at: new Date(expiresAt).toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('user_id', userId);

    if (updateError) {
      console.error('Erro ao atualizar token na tabela spotify_tokens:', updateError);
      // Não lança um erro fatal, apenas registra, para que a função ainda retorne o token
    }

    // 6. Retorna os novos dados do token
    return new Response(JSON.stringify({
      access_token: tokenData.access_token,
      expires_in: tokenData.expires_in,
      refresh_token: tokenData.refresh_token || refreshToken
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200
    });

  } catch (error) {
    console.error('Erro na Edge Function refresh-spotify-token:', error.message);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500
    });
  }
});
