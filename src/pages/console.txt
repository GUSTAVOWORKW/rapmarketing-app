create table public.smart_links (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  user_id uuid null,
  artist_name character varying(255) null,
  release_title character varying(255) null,
  cover_image_url text null,
  template_id character varying(50) not null default 'inspiration'::character varying,
  custom_colors jsonb null default '{}'::jsonb,
  platform_links jsonb null default '[]'::jsonb,
  slug character varying(100) not null,
  is_public boolean null default true,
  view_count integer null default 0,
  description text null,
  title text null,
  cover_image_click_url text null,
  artist_title text null,
  contact_button_url text null,
  contact_button_text text null,
  social_links jsonb null,
  platforms jsonb null,
  player_url text null,
  feat text null,
  bio text null,
  avatar_url text null,
  constraint smart_links_pkey primary key (id),
  constraint smart_links_slug_key unique (slug),
  constraint unique_user_smart_link_slug unique (user_id, slug),
  constraint smart_links_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_smart_links_user_id_slug on public.smart_links using btree (user_id, slug) TABLESPACE pg_default;

create index IF not exists idx_smart_links_user_id_created_at on public.smart_links using btree (user_id, created_at desc) TABLESPACE pg_default;

create trigger update_smart_links_updated_at BEFORE
update on smart_links for EACH row
execute FUNCTION update_updated_at_column ();